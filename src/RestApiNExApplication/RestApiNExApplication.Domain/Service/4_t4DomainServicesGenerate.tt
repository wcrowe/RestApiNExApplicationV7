
<#@ include file="../../RestApiNExApplication.Entity/TemplateCommon.tt"#>

<#
	var tc = new TemplateCommon();

	//get list of entity classes to use as templates to create service classes
	List<EnvDTE.CodeClass> entityClassesNotExistsinService = tc.GetClassesToCreate(false,"RestApiNExApplication.Entity", "BaseEntity","RestApiNExApplication.Domain", "GenericService","Service");
#>
// —————————————— 
// <auto-generated> 
//	This code was auto-generated <#= DateTime.Now #>
//     	T4 template generates service code
//	NOTE:T4 generated code may need additional updates/addjustments by developer in order to compile a solution.
// <auto-generated> 
// —————————————–
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text;
using AutoMapper;
using RestApiNExApplication.Entity;
using RestApiNExApplication.Entity.UnitofWork;

namespace RestApiNExApplication.Domain.Service
{
<#
	foreach(EnvDTE.CodeClass cl in entityClassesNotExistsinService)
	{
	var entityName = cl.Name;
#>

    /// <summary>
    ///
    /// A <#= entityName #> service
    ///       
    /// </summary>
    public class <#= entityName #>Service<Tv, Te> : GenericService<Tv, Te>
                                        where Tv : <#= entityName #>ViewModel
                                        where Te : <#= entityName #>
    {
        //DI must be implemented in specific service as well beside GenericService constructor
        public <#= entityName #>Service(IUnitOfWork unitOfWork, IMapper mapper)
        {
            if (_unitOfWork == null)
                _unitOfWork = unitOfWork;
            if (_mapper == null)
                _mapper = mapper;
        }

        public virtual IEnumerable<Tv> GetAll(Pagination pagination)
        {
            var queryable = _unitOfWork.Context.<#= entityName #>s.AsQueryable();
            var entities = queryable.Paginate(pagination, out PaginationPagesCnt).ToList();
            return _mapper.Map<IEnumerable<Tv>>(source: entities);
        }

        //add here any custom service method or override generic service method
    }

	/// <summary>
    /// A <#= entityName #> service
    /// </summary>
    public class <#= entityName #>ServiceAsync<Tv, Te> : GenericServiceAsync<Tv, Te>
                                        where Tv : <#= entityName #>ViewModel
                                        where Te : <#= entityName #>
    {
        //DI must be implemented in specific service as well beside GenericService constructor
        public <#= entityName #>ServiceAsync(IUnitOfWork unitOfWork, IMapper mapper)
        {
            if (_unitOfWork == null)
                _unitOfWork = unitOfWork;
            if (_mapper == null)
                _mapper = mapper;
        }

        public virtual async Task<IEnumerable<Tv>> GetAll(Pagination pagination)
        {
            var queryable = await Task.FromResult(_unitOfWork.Context.<#= entityName #>s.AsQueryable());
            return (IEnumerable<Tv>)await queryable.Paginate(pagination, out PaginationPagesCnt).ToListAsync();
        }

        //add here any custom service method or override generic service method
    }
<#
   }
#>
}